'\" t
.\" Manual page created with latex2man on Mon Nov 15 14:11:33 EST 2010
.\" NOTE: This file is generated, DO NOT EDIT.
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "JELLYFISH" "1" "2010/10/1" "k\-mer counter " "k\-mer counter "
.SH NAME

.PP
Jellyfish
is a software to count k\-mers in DNA sequences. 
.PP
.SH SYNOPSIS

jellyfish count
[\fB\-o\fP\fIprefix\fP]
[\fB\-m\fP\fImerlength\fP]
[\fB\-t\fP\fIthreads\fP]
[\fB\-s\fP\fIhashsize\fP]
[\fB--both\-strands\fP]
\fIfasta\fP
[\fIfasta \&...
\fP]
.br
jellyfish merge
\fIhash1\fP
\fIhash2\fP
\&...
.br
jellyfish stats
[\fB--fasta\fP]
[\fB\-c\fP]
\fIhash\fP
.br
jellyfish histo
[\fB\-h\fP\fIhigh\fP]
[\fB\-l\fP\fIlow\fP]
[\fB\-i\fP\fIincrement\fP]
\fIhash\fP
.br
jellyfish query
\fIhash\fP
.PP
.SH DESCRIPTION

.PP
Jellyfish
is a k\-mer counter based on a multi\-threaded hash 
table implementation. 
.PP
To count k\-mers, use a command like: 
.PP
.Vb
jellyfish count \-m 22 \-o output \-c 3 \-s 10000000 \-t 32 input.fasta
.Ve
.PP
This will count the the 22\-mers in species.fasta with 32 threads. The 
counter field in the hash uses only 3 bits and the hash has at least 
10 million entries. Let the size of the table be s=2^l and the max 
reprobe value is less than 2^r, then the memory usage per entry in the hash is (in bits, not bytes) 2k\-l+r+1\&. 
.PP
To save space, the hash table supports variable length counter, i.e. a 
k\-mer occurring only a few times will use a small counter, a k\-mer 
occurring many times will used multiple entries in the hash. The 
\fB\-c\fP
specify the length of the small counter. The tradeoff is: a 
low value will save space per entry in the hash but will increase the 
number of entries used, hence maybe requiring a larger hash. In 
practice, use a value for \fB\-c\fP
so that most of you k\-mers 
require only 1 entry. For example, to count k\-mers in a genome, 
where most of the sequence is unique, use \fB\-c\fP\fI1\fP
or 
\fB\-c\fP\fI2\fP\&.
For sequencing reads, use a value for 
\fB\-c\fP
large enough to counts up to twice the coverage. 
.PP
When the orientation of the sequences in the input fasta file is not 
known, e.g. in sequencing reads, using \fB--both\-strands\fP
makes the most sense. 
.PP
.SH OPTIONS

.PP
.SS COUNT
.PP
Count k\-mers in one or many fasta file(s). There is no restriction 
in the size of the fasta file, the number of sequences or the size of 
the sequences in the fasta files. On the other hand, they must be 
files on and not pipes, as the files are memory mapped into memory. 
.PP
.TP
\fB\-o\fP,
\fB--output=\fP\fIprefix\fP
 Output file prefix. Results will be store 
in files with the format prefix_#,
where # is a number 
starting at 0. More than one file will be written if all the 
k\-mers could not be counted in the given size. 
.TP
\fB\-m\fP,
\fB--mer\-len=\fP\fImerlength\fP
 Length of mer to 
count. I.e. value of k in k\-mer. 
.TP
\fB\-t\fP,
\fB--threads=\fP\fINB\fP
 Number of threads. 
.TP
\fB\-s\fP,
\fB--size=\fP\fIhashsize\fP
 Size of hash table. This 
will be rounded up to the next power of two. 
.TP
\fB--both\-strands\fP
 Collapse counters for a k\-mer and its 
reverse complement. I.e., when jellyfish
encounters a k\-mer 
m, it checks which of m or the reverse complement of m comes 
first in lexicographic order (call it the canonical representation) 
and increments the counter for this canonical representation. 
.TP
\fB\-p\fP,
\fB--reprobes=\fP\fINB\fP
 Maximum reprobe 
value. This determine the usage of the hash table (i.e. % of 
entries used in hash) before being deemed full and written to disk. 
.TP
\fB--timing=\fP\fIfile\fP
 Write detailed timing information to 
file\&.
.TP
\fB--no\-write\fP
 Do not write result file. Used for timing only. 
.TP
\fB--out\-counter\-len=\fP\fILEN\fP
 Length of the counter field in 
the output (in bytes). The value of the counter for any k\-mer is 
capped at the maximum value that can be encoded in this number of 
bytes. 
.PP
.SS STATS
.PP
Display statistics or dump full content of hash table in an easily 
parsable text format. 
.PP
.TP
\fB\-c\fP,\fB--column\fP
 Print k\-mers counts in column format: sequence count. 
.TP
\fB\-f\fP,\fB--fasta\fP
 Print k\-mers counts in fasta format. The header is the count. 
.TP
\fB\-r\fP,\fB--recompute\fP
 Recompute statistics from the hash 
table instead of the statistics in the header. 
.PP
By default, it displays the statistics in the header of the file. These are: 
.PP
.TP
Unique: 
Number of k\-mers which occur only once. 
.TP
Distinct: 
Number of k\-mers, not counting multiplicity. 
.TP
Total: 
Number of k\-mers including multiplicity. 
.TP
Max_count: 
Maximum number of occurrence of a k\-mer. 
.PP
.SS HISTO
.PP
Create an histogram with the number of k\-mers having a given count. In bucket i are tallied the k\-mers which have a count c satisfying low+i*inc<=c<low+(i+1)*inc\&. Buckets in the output are labeled by the low end point (low+i*inc). 
.PP
The last bucket in the output behaves as a catchall: it tallies all 
k\-mers with a count greater or equal to the low end point of this 
bucket. 
.PP
.TP
\fB\-h\fP,
\fB--high=\fP\fIHIGH\fP
 High count bucket value. 
.TP
\fB\-i\fP,
\fB--increment=\fP\fIINC\fP
 Increment for bucket value. 
.TP
\fB\-l\fP,
\fB--low=\fP\fILOW\fP
 Low count bucket value. 
.PP
.SS QUERY
.PP
Query a database created with jellyfish count\&.
It reads 
k\-mers from the standard input and write the counts on the standard 
output. For example: 
.PP
.Vb
$ echo "AAAAA ACGTA" | jellyfish query database
AAAAA 12
ACGTA 3
.Ve
.PP
.TP
\fB--both\-strands\fP
 Report the count for the canonical version of 
the k\-mers read from standard input. 
.PP
.SH VERSION

.PP
Version: 1.0 of 2010/10/1
.PP
.SH BUGS

.PP
.TP
.B *
jellyfish merge has not been parallelized and is very
slow. 
.PP
.SH COPYRIGHT & LICENSE

.TP
Copyright 
(C)2010, Guillaume Marcais \fBguillaume@marcais.net\fP
and Carl Kingsford \fBcarlk@umiacs.umd.edu\fP\&.
.PP
.TP
License 
This program is free software: you can redistribute it 
and/or modify it under the terms of the GNU General Public License 
as published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version. 
.br
This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
General Public License for more details. 
.br
You should have received a copy of the GNU General Public License 
along with this program. If not, see 
<\fBhttp://www.gnu.org/licenses/\fP>.
.PP
.SH AUTHORS

Guillaume Marcais 
.br
University of Maryland 
.br
\fBgmarcais@umd.edu\fP
.PP
Carl Kingsford 
.br
University of Maryland 
.br
\fBcarlk@umiacs.umd.edu\fP
.PP
.\" NOTE: This file is generated, DO NOT EDIT.
